#!/usr/bin/env node

const CLI = require('cli-kit').CLI;
const iosDevice = require('../src/index');
const pkgJson = require('../package.json');

function selectDevice(udid) {
	if (udid) {
		return udid;
	}

	const devices = iosDevice.list();
	if (!devices.length) {
		throw new Error('No iOS devices connected');
	}

	return devices[0].udid;
}

new CLI({
	commands: {
		forward: {
			args: [
				{ name: 'port', desc: 'The port to connect to on the device', required: true },
				{ name: 'udid', desc: 'The iOS device\'s unique device identifier' }
			],
			desc: 'Connects to a port on an device and relays messages',
			action({ argv }) {
				return new Promise(resolve => {
					iosDevice.forward(selectDevice(argv.udid), argv.port)
						.on('data', console.log)
						.on('end', resolve);
				});
			}
		},
		install: {
			aliases: 'i',
			args: [
				{ name: 'appPath', desc: 'The path to a .app directory to install', required: true },
				{ name: 'udid', desc: 'The iOS device\'s unique device identifier' }
			],
			desc: 'Install an app on the specified device',
			action({ argv }) {
				iosDevice.install(selectDevice(argv.udid), argv.appPath);
			}
		},
		list: {
			aliases: [ 'ls', 'devices' ],
			desc: 'Lists connected devices',
			action() {
				console.log(JSON.stringify(iosDevice.list(), null, '  '));
			}
		},
		watch: {
			aliases: 'track-devices',
			desc: 'Listens for devices to be connected/disconnected',
			action() {
				iosDevice.watch().on('change', devices => {
					console.log(JSON.stringify(devices, null, '  '));
					console.log();
				});
			}
		}
	},
	help: true,
	name: pkgJson.name,
	version: pkgJson.version
}).exec()
	.catch(err => {
		console.error(err.message);
		process.exit(err.exitCode || 1);
	});
