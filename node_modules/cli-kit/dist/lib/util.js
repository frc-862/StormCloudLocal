"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.assertNodeJSVersion = assertNodeJSVersion;
exports.declareCLIKitClass = declareCLIKitClass;
exports.decodeHeader = exports.decode = decode;
exports.encodeHeader = exports.encode = encode;
exports.filename = filename;
exports.findPackage = findPackage;
exports.isExecutable = isExecutable;
exports.isFile = isFile;
Object.defineProperty(exports, "pkgDir", {
  enumerable: true,
  get: function () {
    return _pkgDir.default;
  }
});
exports.split = split;
exports.wrap = wrap;

var _argvSplit = _interopRequireDefault(require("argv-split"));

var _fsExtra = _interopRequireDefault(require("fs-extra"));

var _errors = _interopRequireDefault(require("./errors"));

var _path = _interopRequireDefault(require("path"));

var _pkgDir = _interopRequireDefault(require("pkg-dir"));

var _semver = _interopRequireDefault(require("semver"));

var _which = _interopRequireDefault(require("which"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * The required Node.js version for cli-kit. This is used to assert the Node version at runtime.
 * If the `CLI` instance is created with a `nodeVersion`, then it assert the greater of the two
 * Node versions.
 *
 * @type {String}
 */
const clikitNodeVersion = _fsExtra.default.readJsonSync(_path.default.resolve(__dirname, '..', '..', 'package.json')).engines.node;
/**
 * Asserts that the current Node.js version meets the requirements of cli-kit as well as the app.
 *
 * @param {Object} opts - Various options.
 * @param {String} [opts.appName] - The name of the app.
 * @param {String} [opts.nodeVersion] - The required Node.js version.
 */


function assertNodeJSVersion({
  appName,
  nodeVersion
}) {
  const {
    version: current
  } = process;
  let required;

  if (!_semver.default.satisfies(current, clikitNodeVersion)) {
    required = clikitNodeVersion;
  } else if (nodeVersion && !_semver.default.satisfies(current, nodeVersion)) {
    required = nodeVersion;
  }

  if (required) {
    throw _errors.default.INVALID_NODE_JS(`${appName !== 'program' && appName || 'This program'} requires Node.js version ${required}, currently ${current}`, {
      current,
      required
    });
  }
}
/**
 * Adds the name of the class and any base classes to an internal `clikit` property.
 *
 * @param {Object} obj - The cli-kit object instance to embed the class name.
 * @param {String} name - The class name.
 * @returns {Object}
 */


function declareCLIKitClass(obj, name) {
  return Object.defineProperty(obj, 'clikit', {
    configurable: true,
    value: new Set([name, ...(obj.clikit || [])])
  });
}
/**
 * Decodes a value.
 *
 * @param {String} value - The value to decode.
 * @returns {*}
 */


function decode(value) {
  return value === undefined || value === null ? '' : JSON.parse(Buffer.from(value, 'base64').toString('utf8'));
}

/**
 * Encodes a JavaScript value using base64.
 *
 * @param {*} it - A value to encode.
 * @returns {String}
 */
function encode(it) {
  return it === undefined || it === null ? it : Buffer.from(JSON.stringify(it), 'utf8').toString('base64');
}

/**
 * Strips off the file extension and returns the filename.
 *
 * @param {String} file - The file to extract the filename from.
 * @returns {String}
 */
function filename(file) {
  return _path.default.basename(file).replace(/\.[^.]+$/, '');
}
/**
 * Searches the specified path for the package root, then returns the directory and parsed
 * `package.json`.
 *
 * @param {String} searchPath - The path to search.
 * @returns {Object}
 */


function findPackage(searchPath) {
  let clikit = false;
  let json = {};
  let main = null;
  let root = _pkgDir.default.sync(searchPath) || null; // don't let the tests think they are cli-kit

  if (root === _path.default.resolve(__dirname, '..', '..')) {
    root = null;
  }

  if (/\.js$/.test(searchPath) && isFile(searchPath)) {
    main = searchPath;
  }

  if (root) {
    const file = _path.default.join(root, 'package.json');

    let contents;

    try {
      contents = _fsExtra.default.readFileSync(file, 'utf8');
    } catch (e) {
      // istanbul ignore next
      throw _errors.default.INVALID_PACKAGE_JSON(`Unable to open package.json: ${e.message}`, {
        name: 'package.json',
        scope: 'util.findPackage',
        value: file
      });
    }

    try {
      json = JSON.parse(contents);
    } catch (e) {
      throw _errors.default.INVALID_PACKAGE_JSON(`Failed to parse package.json: ${e.message}`, {
        file,
        name: 'package.json.bad',
        scope: 'util.findPackage',
        value: contents
      });
    }

    if (typeof json !== 'object') {
      throw _errors.default.INVALID_PACKAGE_JSON('Invalid package.json: expected object', {
        file,
        name: 'package.json.invalid',
        scope: 'util.findPackage',
        value: json
      });
    }

    if (json.clikit || json['cli-kit']) {
      clikit = true;
      Object.assign(json, json.clikit, json['cli-kit']);
    }

    if (!main) {
      if (json.main) {
        try {
          main = _path.default.resolve(root, json.main);

          if (_fsExtra.default.statSync(main).isDirectory()) {
            main = _path.default.join(main, 'index.js');
          }
        } catch (e) {
          main = _path.default.resolve(root, `${json.main}.js`);
        }
      } else {
        main = _path.default.resolve(root, 'index.js');
      }

      if (!isFile(main)) {
        main = null;
      }
    }
  } else {
    root = main ? _path.default.dirname(main) : null;
  }

  return {
    clikit,
    json,
    main,
    root
  };
}
/**
 * Attempts to determine if the specified string is an executable.
 *
 * @param {String} bin - An executable name, path, or entire command.
 * @returns {Array.<String>}
 */


function isExecutable(bin) {
  let args;

  try {
    args = split(bin);
    bin = args.shift();
  } catch (err) {// this shouldn't happen, but if it does, just fallback to the original value
  }

  return [_which.default.sync(bin), ...args];
}
/**
 * Determines if a file exists and that it is indeed a file.
 *
 * @param {String} file - The file to check.
 * @returns {Boolean}
 */


function isFile(file) {
  try {
    return _fsExtra.default.statSync(file).isFile();
  } catch (e) {// squelch
  }

  return false;
}

/**
 * Splits an argv (argument vector) string.
 *
 * This function is just a wrapper around argv-split just in case we ever want to replace it.
 * https://www.npmjs.com/package/argv-split.
 *
 * @param {String} it - The argv string to split.
 * @returns {Array.<String>}
 */
function split(it) {
  return (0, _argvSplit.default)(it);
}
/**
 * Inserts line breaks into a string so that the text does not exceed the specified width.
 *
 * @param {String} str - The string to line wrap.
 * @param {Number} [width] - The width to break the lines; defaults to the terminal width.
 * @param {Number} [indent] - The number of spaces to indent new lines.
 * @returns {String}
 */


function wrap(str, width, indent) {
  if (width <= 0) {
    return str;
  }

  indent = ' '.repeat(indent || 0);
  return str.split(/\r?\n/).map(line => {
    let i = 0;
    let j = 0;
    let k; // remove escape characters

    line = line.replace(/\u001b\[J/g, ''); // eslint-disable-line no-control-regex

    while (i < line.length) {
      i++;

      if (++j >= width) {
        // backpedal
        for (k = i; k >= 0; k--) {
          if (/[ ,;!?]/.test(line.charAt(k)) || /[.:]/.test(line.charAt(k)) && (k + 1 >= line.length || /[ \t\r\n]/.test(line.charAt(k + 1)))) {
            if (k + 1 < line.length) {
              line = `${line.substring(0, k)}\n${indent}${line.substring(k + 1)}`;
              i = k + 1;
              j = 0;
            }

            break;
          }
        }
      }
    }

    return line;
  }).join('\n');
}
//# sourceMappingURL=data:application/json;charset=utf8;base64,
