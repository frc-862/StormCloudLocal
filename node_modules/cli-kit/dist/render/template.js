"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.escapeTildes = escapeTildes;
exports.render = render;
exports.renderFile = renderFile;

var _errors = _interopRequireDefault(require("../lib/errors"));

var _fs = _interopRequireDefault(require("fs"));

var _ansi = require("../lib/ansi");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// import debug from '../lib/debug';
// const logger = debug('cli-kit:template:in');
// const { log } = logger;
// const log2 = logger('out').log;

/**
 * Matches intentional line breaks in multiline strings.
 *
 * @type {RegExp}
 */
const breakRegExp = /[ \t]?\\\n/g;
/**
 * Finds output statements and formats them into print statements.
 *
 * Regex breakdown:
 *   `(?<=^|\n)([ \t]*)(>+)`: Find one or more contiguous `>` characters where they are at the
 *                            beginning of template or line. We capture each `>` so that we can
 *                            determine how many line returns to add after the line is printed.
 *   `(\|\?|\?\||\||\?)?`:    Detect modifier flags. These control rendering such as trimming the
 *                            output.
 *   `(.*?)(?:(?<!\\)\n|$)`:  Capture the entire message, including multiline `\` tokens, up to the
 *                            first line break.
 *   `/gs`:                   Set the `global` and `dot all` flags. `global` will find all matches.
 *                            `dot all` (introduced in ES2018), allows us to capture intentional
 *                            line breaks.
 *
 * @type {RegExp}
 */

let printRegExp;
/**
 * Escapes tildes in a string that is to be evaluated as a template literal. It uses a simple state
 * machine to keep track of whether it's in an expression or template literal.
 *
 * @param {String} str - The string to escape.
 * @returns {String}
 */

function escapeTildes(str) {
  let state = [0];
  let s = '';

  for (let i = 0, l = str.length; i < l; i++) {
    switch (state[0]) {
      case 0:
        // not in an expression
        if ((i === 0 || str[i - 1] !== '\\') && str[i] === '$' && str[i + 1] === '{') {
          s += str[i++]; // $

          s += str[i]; // {

          state.unshift(1);
        } else if (str[i] === '`') {
          s += '\\`';
        } else {
          s += str[i];
        }

        break;

      case 1:
        // in an expression
        if (str[i] === '}') {
          state.shift();
        } else if (str[i] === '`') {
          state.unshift(2);
        }

        s += str[i];
        break;

      case 2:
        // in template literal
        if (str[i] === '`') {
          state.shift();
        }

        s += str[i];
        break;
    }
  }

  return s;
}
/**
 * Renders a template with the supplied data.
 *
 * @param {String} template - The template to render.
 * @param {Object} [data] - An object to inject into the template.
 * @returns {String}
 */


function render(template, data) {
  if (!printRegExp) {
    try {
      printRegExp = new RegExp('(?<=^|\\n)([ \\t]*)(>+)(\\|\\?|\\?\\||\\||\\?)?(.*?)(?:(?<!\\\\)\\n|$)', 'gs');
    } catch (e) {
      // istanbul ignore next
      throw _errors.default.INVALID_NODE_JS('Node.js version is too old; must be v8.10 or newer');
    }
  }

  if (!data || typeof data !== 'object') {
    data = {};
  } // log(template);
  // log(Object.keys(data));


  const vars = Object.keys(data);
  let body = (vars.length ? `let { ${vars.join(', ')} } = __data;\n\n` : '') + template.replace(printRegExp, (_, ws, lines, flags, str) => {
    str = str.replace(/\\(?!\n)/g, '\\\\');
    str = escapeTildes(str);
    str = str.replace(breakRegExp, '\\n');
    return `${ws}__print(\`${str}\`, ${lines.length - 1}${flags === undefined ? '' : `, '${flags}'`});\n`;
  }); // log2(body);

  const fn = new Function('__data', '__print', body);
  let output = '';
  fn(data, (str, linebreaks, flags) => {
    str = flags !== null && flags !== void 0 && flags.includes('|') ? (0, _ansi.trimEnd)(str) : (0, _ansi.trim)(str);

    if (!(flags !== null && flags !== void 0 && flags.includes('?')) || str) {
      output += `${str}${linebreaks ? '\n'.repeat(linebreaks) : ''}`;
    }
  });
  return output.replace(/(\r\n|\r|\n)+$/g, '\n');
}
/**
 * Reads in a template file and renders it.
 *
 * @param {String} file - The path to the template file.
 * @param {Object} [data] - An object to inject into the template.
 * @returns {String}
 */


function renderFile(file, data) {
  let template;

  try {
    template = _fs.default.readFileSync(file, 'utf8');
  } catch (e) {
    throw _errors.default.TEMPLATE_NOT_FOUND(`Unable to find template: ${file}`, {
      name: 'file',
      scope: 'template.renderFile',
      value: file
    });
  }

  return render(template, data);
}
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJlbmRlci90ZW1wbGF0ZS5qcyJdLCJuYW1lcyI6WyJicmVha1JlZ0V4cCIsInByaW50UmVnRXhwIiwiZXNjYXBlVGlsZGVzIiwic3RyIiwic3RhdGUiLCJzIiwiaSIsImwiLCJsZW5ndGgiLCJ1bnNoaWZ0Iiwic2hpZnQiLCJyZW5kZXIiLCJ0ZW1wbGF0ZSIsImRhdGEiLCJSZWdFeHAiLCJlIiwiRSIsIklOVkFMSURfTk9ERV9KUyIsInZhcnMiLCJPYmplY3QiLCJrZXlzIiwiYm9keSIsImpvaW4iLCJyZXBsYWNlIiwiXyIsIndzIiwibGluZXMiLCJmbGFncyIsInVuZGVmaW5lZCIsImZuIiwiRnVuY3Rpb24iLCJvdXRwdXQiLCJsaW5lYnJlYWtzIiwiaW5jbHVkZXMiLCJyZXBlYXQiLCJyZW5kZXJGaWxlIiwiZmlsZSIsImZzIiwicmVhZEZpbGVTeW5jIiwiVEVNUExBVEVfTk9UX0ZPVU5EIiwibmFtZSIsInNjb3BlIiwidmFsdWUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUNBOztBQUNBOztBQUNBOzs7O0FBSEE7QUFLQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU1BLFdBQVcsR0FBRyxhQUFwQjtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0EsSUFBSUMsV0FBSjtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNPLFNBQVNDLFlBQVQsQ0FBc0JDLEdBQXRCLEVBQTJCO0FBQ2pDLE1BQUlDLEtBQUssR0FBRyxDQUFFLENBQUYsQ0FBWjtBQUNBLE1BQUlDLENBQUMsR0FBRyxFQUFSOztBQUNBLE9BQUssSUFBSUMsQ0FBQyxHQUFHLENBQVIsRUFBV0MsQ0FBQyxHQUFHSixHQUFHLENBQUNLLE1BQXhCLEVBQWdDRixDQUFDLEdBQUdDLENBQXBDLEVBQXVDRCxDQUFDLEVBQXhDLEVB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QWdCRixJQUFoQixFQUFzQixNQUF0QixDQUFYO0FBQ0EsR0FGRCxDQUVFLE9BQU9yQixDQUFQLEVBQVU7QUFDWCxVQUFNQyxnQkFBRXVCLGtCQUFGLENBQXNCLDRCQUEyQkgsSUFBSyxFQUF0RCxFQUF5RDtBQUFFSSxNQUFBQSxJQUFJLEVBQUUsTUFBUjtBQUFnQkMsTUFBQUEsS0FBSyxFQUFFLHFCQUF2QjtBQUE4Q0MsTUFBQUEsS0FBSyxFQUFFTjtBQUFyRCxLQUF6RCxDQUFOO0FBQ0E7O0FBRUQsU0FBT3pCLE1BQU0sQ0FBQ0MsUUFBRCxFQUFXQyxJQUFYLENBQWI7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbIi8vIGltcG9ydCBkZWJ1ZyBmcm9tICcuLi9saWIvZGVidWcnO1xuaW1wb3J0IEUgZnJvbSAnLi4vbGliL2Vycm9ycyc7XG5pbXBvcnQgZnMgZnJvbSAnZnMnO1xuaW1wb3J0IHsgdHJpbSwgdHJpbUVuZCB9IGZyb20gJy4uL2xpYi9hbnNpJztcblxuLy8gY29uc3QgbG9nZ2VyID0gZGVidWcoJ2NsaS1raXQ6dGVtcGxhdGU6aW4nKTtcbi8vIGNvbnN0IHsgbG9nIH0gPSBsb2dnZXI7XG4vLyBjb25zdCBsb2cyID0gbG9nZ2VyKCdvdXQnKS5sb2c7XG5cbi8qKlxuICogTWF0Y2hlcyBpbnRlbnRpb25hbCBsaW5lIGJyZWFrcyBpbiBtdWx0aWxpbmUgc3RyaW5ncy5cbiAqXG4gKiBAdHlwZSB7UmVnRXhwfVxuICovXG5jb25zdCBicmVha1JlZ0V4cCA9IC9bIFxcdF0/XFxcXFxcbi9nO1xuXG4vKipcbiAqIEZpbmRzIG91dHB1dCBzdGF0ZW1lbnRzIGFuZCBmb3JtYXRzIHRoZW0gaW50byBwcmludCBzdGF0ZW1lbnRzLlxuICpcbiAqIFJlZ2V4IGJyZWFrZG93bjpcbiAqICAgYCg/PD1efFxcbikoWyBcXHRdKikoPispYDogRmluZCBvbmUgb3IgbW9yZSBjb250aWd1b3VzIGA+YCBjaGFyYWN0ZXJzIHdoZXJlIHRoZXkgYXJlIGF0IHRoZVxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgYmVnaW5uaW5nIG9mIHRlbXBsYXRlIG9yIGxpbmUuIFdlIGNhcHR1cmUgZWFjaCBgPmAgc28gdGhhdCB3ZSBjYW5cbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRldGVybWluZSBob3cgbWFueSBsaW5lIHJldHVybnMgdG8gYWRkIGFmdGVyIHRoZSBsaW5lIGlzIHByaW50ZWQuXG4gKiAgIGAoXFx8XFw/fFxcP1xcfHxcXHx8XFw/KT9gOiAgICBEZXRlY3QgbW9kaWZpZXIgZmxhZ3MuIFRoZXNlIGNvbnRyb2wgcmVuZGVyaW5nIHN1Y2ggYXMgdHJpbW1pbmcgdGhlXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdXRwdXQuXG4gKiAgIGAoLio/KSg/Oig/PCFcXFxcKVxcbnwkKWA6ICBDYXB0dXJlIHRoZSBlbnRpcmUgbWVzc2FnZSwgaW5jbHVkaW5nIG11bHRpbGluZSBgXFxgIHRva2VucywgdXAgdG8gdGhlXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaXJzdCBsaW5lIGJyZWFrLlxuICogICBgL2dzYDogICAgICAgICAgICAgICAgICAgU2V0IHRoZSBgZ2xvYmFsYCBhbmQgYGRvdCBhbGxgIGZsYWdzLiBgZ2xvYmFsYCB3aWxsIGZpbmQgYWxsIG1hdGNoZXMuXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICBgZG90IGFsbGAgKGludHJvZHVjZWQgaW4gRVMyMDE4KSwgYWxsb3dzIHVzIHRvIGNhcHR1cmUgaW50ZW50aW9uYWxcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmUgYnJlYWtzLlxuICpcbiAqIEB0eXBlIHtSZWdFeHB9XG4gKi9cbmxldCBwcmludFJlZ0V4cDtcblxuLyoqXG4gKiBFc2NhcGVzIHRpbGRlcyBpbiBhIHN0cmluZyB0aGF0IGlzIHRvIGJlIGV2YWx1YXRlZCBhcyBhIHRlbXBsYXRlIGxpdGVyYWwuIEl0IHVzZXMgYSBzaW1wbGUgc3RhdGVcbiAqIG1hY2hpbmUgdG8ga2VlcCB0cmFjayBvZiB3aGV0aGVyIGl0J3MgaW4gYW4gZXhwcmVzc2lvbiBvciB0ZW1wbGF0ZSBsaXRlcmFsLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHIgLSBUaGUgc3RyaW5nIHRvIGVzY2FwZS5cbiAqIEByZXR1cm5zIHtTdHJpbmd9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBlc2NhcGVUaWxkZXMoc3RyKSB7XG5cdGxldCBzdGF0ZSA9IFsgMCBdO1xuXHRsZXQgcyA9ICcnO1xuXHRmb3IgKGxldCBpID0gMCwgbCA9IHN0ci5sZW5ndGg7IGkgPCBsOyBpKyspIHtcblx0XHRzd2l0Y2ggKHN0YXRlWzBdKSB7XG5cdFx0XHRjYXNlIDA6IC8vIG5vdCBpbiBhbiBleHByZXNzaW9uXG5cdFx0XHRcdGlmICgoaSA9PT0gMCB8fCBzdHJbaSAtIDFdICE9PSAnXFxcXCcpICYmIHN0cltpXSA9PT0gJyQnICYmIHN0cltpICsgMV0gPT09ICd7Jykge1xuXHRcdFx0XHRcdHMgKz0gc3RyW2krK107IC8vICRcblx0XHRcdFx0XHRzICs9IHN0cltpXTsgICAvLyB7XG5cdFx0XHRcdFx0c3RhdGUudW5zaGlmdCgxKTtcblx0XHRcdFx0fSBlbHNlIGlmIChzdHJbaV0gPT09ICdgJykge1xuXHRcdFx0XHRcdHMgKz0gJ1xcXFxgJztcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRzICs9IHN0cltpXTtcblx0XHRcdFx0fVxuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSAxOiAvLyBpbiBhbiBleHByZXNzaW9uXG5cdFx0XHRcdGlmIChzdHJbaV0gPT09ICd9Jykge1xuXHRcdFx0XHRcdHN0YXRlLnNoaWZ0KCk7XG5cdFx0XHRcdH0gZWxzZSBpZiAoc3RyW2ldID09PSAnYCcpIHtcblx0XHRcdFx0XHRzdGF0ZS51bnNoaWZ0KDIpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHMgKz0gc3RyW2ldO1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSAyOiAvLyBpbiB0ZW1wbGF0ZSBsaXRlcmFsXG5cdFx0XHRcdGlmIChzdHJbaV0gPT09ICdgJykge1xuXHRcdFx0XHRcdHN0YXRlLnNoaWZ0KCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0cyArPSBzdHJbaV07XG5cdFx0XHRcdGJyZWFrO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gcztcbn1cblxuLyoqXG4gKiBSZW5kZXJzIGEgdGVtcGxhdGUgd2l0aCB0aGUgc3VwcGxpZWQgZGF0YS5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gdGVtcGxhdGUgLSBUaGUgdGVtcGxhdGUgdG8gcmVuZGVyLlxuICogQHBhcmFtIHtPYmplY3R9IFtkYXRhXSAtIEFuIG9iamVjdCB0byBpbmplY3QgaW50byB0aGUgdGVtcGxhdGUuXG4gKiBAcmV0dXJucyB7U3RyaW5nfVxuICovXG5leHBvcnQgZnVuY3Rpb24gcmVuZGVyKHRlbXBsYXRlLCBkYXRhKSB7XG5cdGlmICghcHJpbnRSZWdFeHApIHtcblx0XHR0cnkge1xuXHRcdFx0cHJpbnRSZWdFeHAgPSBuZXcgUmVnRXhwKCcoPzw9XnxcXFxcbikoWyBcXFxcdF0qKSg+KykoXFxcXHxcXFxcP3xcXFxcP1xcXFx8fFxcXFx8fFxcXFw/KT8oLio/KSg/Oig/PCFcXFxcXFxcXClcXFxcbnwkKScsICdncycpO1xuXHRcdH0gY2F0Y2ggKGUpIHtcblx0XHRcdC8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0XG5cdFx0XHR0aHJvdyBFLklOVkFMSURfTk9ERV9KUygnTm9kZS5qcyB2ZXJzaW9uIGlzIHRvbyBvbGQ7IG11c3QgYmUgdjguMTAgb3IgbmV3ZXInKTtcblx0XHR9XG5cdH1cblxuXHRpZiAoIWRhdGEgfHwgdHlwZW9mIGRhdGEgIT09ICdvYmplY3QnKSB7XG5cdFx0ZGF0YSA9IHt9O1xuXHR9XG5cblx0Ly8gbG9nKHRlbXBsYXRlKTtcblx0Ly8gbG9nKE9iamVjdC5rZXlzKGRhdGEpKTtcblxuXHRjb25zdCB2YXJzID0gT2JqZWN0LmtleXMoZGF0YSk7XG5cdGxldCBib2R5ID0gKHZhcnMubGVuZ3RoID8gYGxldCB7ICR7dmFycy5qb2luKCcsICcpfSB9ID0gX19kYXRhO1xcblxcbmAgOiAnJykgK1xuXHRcdHRlbXBsYXRlLnJlcGxhY2UocHJpbnRSZWdFeHAsIChfLCB3cywgbGluZXMsIGZsYWdzLCBzdHIpID0+IHtcblx0XHRcdHN0ciA9IHN0ci5yZXBsYWNlKC9cXFxcKD8hXFxuKS9nLCAnXFxcXFxcXFwnKTtcblx0XHRcdHN0ciA9IGVzY2FwZVRpbGRlcyhzdHIpO1xuXHRcdFx0c3RyID0gc3RyLnJlcGxhY2UoYnJlYWtSZWdFeHAsICdcXFxcbicpO1xuXHRcdFx0cmV0dXJuIGAke3dzfV9fcHJpbnQoXFxgJHtzdHJ9XFxgLCAke2xpbmVzLmxlbmd0aCAtIDF9JHtmbGFncyA9PT0gdW5kZWZpbmVkID8gJycgOiBgLCAnJHtmbGFnc30nYH0pO1xcbmA7XG5cdFx0fSk7XG5cblx0Ly8gbG9nMihib2R5KTtcblxuXHRjb25zdCBmbiA9IG5ldyBGdW5jdGlvbignX19kYXRhJywgJ19fcHJpbnQnLCBib2R5KTtcblx0bGV0IG91dHB1dCA9ICcnO1xuXG5cdGZuKGRhdGEsIChzdHIsIGxpbmVicmVha3MsIGZsYWdzKSA9PiB7XG5cdFx0c3RyID0gZmxhZ3M/LmluY2x1ZGVzKCd8JykgPyB0cmltRW5kKHN0cikgOiB0cmltKHN0cik7XG5cdFx0aWYgKCFmbGFncz8uaW5jbHVkZXMoJz8nKSB8fCBzdHIpIHtcblx0XHRcdG91dHB1dCArPSBgJHtzdHJ9JHtsaW5lYnJlYWtzID8gJ1xcbicucmVwZWF0KGxpbmVicmVha3MpIDogJyd9YDtcblx0XHR9XG5cdH0pO1xuXG5cdHJldHVybiBvdXRwdXQucmVwbGFjZSgvKFxcclxcbnxcXHJ8XFxuKSskL2csICdcXG4nKTtcbn1cblxuLyoqXG4gKiBSZWFkcyBpbiBhIHRlbXBsYXRlIGZpbGUgYW5kIHJlbmRlcnMgaXQuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGZpbGUgLSBUaGUgcGF0aCB0byB0aGUgdGVtcGxhdGUgZmlsZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbZGF0YV0gLSBBbiBvYmplY3QgdG8gaW5qZWN0IGludG8gdGhlIHRlbXBsYXRlLlxuICogQHJldHVybnMge1N0cmluZ31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlbmRlckZpbGUoZmlsZSwgZGF0YSkge1xuXHRsZXQgdGVtcGxhdGU7XG5cblx0dHJ5IHtcblx0XHR0ZW1wbGF0ZSA9IGZzLnJlYWRGaWxlU3luYyhmaWxlLCAndXRmOCcpO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0dGhyb3cgRS5URU1QTEFURV9OT1RfRk9VTkQoYFVuYWJsZSB0byBmaW5kIHRlbXBsYXRlOiAke2ZpbGV9YCwgeyBuYW1lOiAnZmlsZScsIHNjb3BlOiAndGVtcGxhdGUucmVuZGVyRmlsZScsIHZhbHVlOiBmaWxlIH0pO1xuXHR9XG5cblx0cmV0dXJuIHJlbmRlcih0ZW1wbGF0ZSwgZGF0YSk7XG59XG4iXSwiZmlsZSI6InJlbmRlci90ZW1wbGF0ZS5qcyJ9
