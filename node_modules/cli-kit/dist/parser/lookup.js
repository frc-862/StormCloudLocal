"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _debug = _interopRequireDefault(require("../lib/debug"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const {
  highlight,
  note
} = _debug.default.styles;
/**
 * Command and option lookup for faster resolution.
 */

class Lookup {
  constructor() {
    _defineProperty(this, "commands", {});

    _defineProperty(this, "extensions", {});

    _defineProperty(this, "long", {});

    _defineProperty(this, "short", {});
  }

  /**
   * Determines if the lookup is empty.
   *
   * @type {Boolean}
   */
  get empty() {
    return !Object.keys(this.commands).length && !Object.keys(this.long).length && !Object.keys(this.short).length;
  }
  /**
   * Renders the lookups to a string.
   *
   * @returns {String}
   * @access public
   */


  toString() {
    const lines = [];

    if (Object.keys(this.commands).length) {
      lines.push(note('  Commands:'));

      for (const name of Object.keys(this.commands)) {
        lines.push(`    ${highlight(name)} => ${highlight(this.commands[name].name)}`);
      }
    }

    if (Object.keys(this.long).length || Object.keys(this.short).length) {
      lines.push(note('  Options:'));

      for (const name of Object.keys(this.long)) {
        lines.push(`    ${highlight(`--${name}`)} => ${highlight(this.long[name].name)}`);
      }

      for (const name of Object.keys(this.short)) {
        lines.push(`    ${highlight(`-${name}`)} => ${highlight(this.short[name].name)}`);
      }
    }

    return lines.length ? lines.join('\n') : '';
  }

}

exports.default = Lookup;
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBhcnNlci9sb29rdXAuanMiXSwibmFtZXMiOlsiaGlnaGxpZ2h0Iiwibm90ZSIsImRlYnVnIiwic3R5bGVzIiwiTG9va3VwIiwiZW1wdHkiLCJPYmplY3QiLCJrZXlzIiwiY29tbWFuZHMiLCJsZW5ndGgiLCJsb25nIiwic2hvcnQiLCJ0b1N0cmluZyIsImxpbmVzIiwicHVzaCIsIm5hbWUiLCJqb2luIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7Ozs7OztBQUVBLE1BQU07QUFBRUEsRUFBQUEsU0FBRjtBQUFhQyxFQUFBQTtBQUFiLElBQXNCQyxlQUFNQyxNQUFsQztBQUVBO0FBQ0E7QUFDQTs7QUFDZSxNQUFNQyxNQUFOLENBQWE7QUFBQTtBQUFBLHNDQU1oQixFQU5nQjs7QUFBQSx3Q0FhZCxFQWJjOztBQUFBLGtDQW9CcEIsRUFwQm9COztBQUFBLG1DQTJCbkIsRUEzQm1CO0FBQUE7O0FBNkIzQjtBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ1UsTUFBTEMsS0FBSyxHQUFHO0FBQ1gsV0FBTyxDQUFDQyxNQUFNLENBQUNDLElBQVAsQ0FBWSxLQUFLQyxRQUFqQixFQUEyQkMsTUFBNUIsSUFBc0MsQ0FBQ0gsTUFBTSxDQUFDQyxJQUFQLENBQVksS0FBS0csSUFBakIsRUFBdUJELE1BQTlELElBQXdFLENBQUNILE1BQU0sQ0FBQ0MsSUFBUCxDQUFZLEtBQUtJLEtBQWpCLEVBQXdCRixNQUF4RztBQUNBO0FBRUQ7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQ0csRUFBQUEsUUFBUSxHQUFHO0FBQ1YsVUFBTUMsS0FBSyxHQUFHLEVBQWQ7O0FBRUEsUUFBSVAsTUFBTSxDQUFDQyxJQUFQLENBQVksS0FBS0MsUUFBakIsRUFBMkJDLE1BQS9CLEVBQXVDO0FBQ3RDSSxNQUFBQSxLQUFLLENBQUNDLElBQU4sQ0FBV2IsSUFBSSxDQUFDLGFBQUQsQ0FBZjs7QUFDQSxXQUFLLE1BQU1jLElBQVgsSUFBbUJULE1BQU0sQ0FBQ0MsSUFBUCxDQUFZLEtBQUtDLFFBQWpCLENBQW5CLEVBQStDO0FBQzlDSyxRQUFBQSxLQUFLLENBQUNDLElBQU4sQ0FBWSxPQUFNZCxTQUFTLENBQUNlLElBQUQsQ0FBTyxPQUFNZixTQUFTLENBQUMsS0FBS1EsUUFBTCxDQUFjTyxJQUFkLEVBQW9CQSxJQUFyQixDQUEyQixFQUE1RTtBQUNBO0FBQ0Q7O0FBRUQsUUFBSVQsTUFBTSxDQUFDQyxJQUFQLENBQVksS0FBS0csSUFBakIsRUFBdUJELE1BQXZCLElBQWlDSCxNQUFNLENBQUNDLElBQVAsQ0FBWSxLQUFLSSxLQUFqQixFQUF3QkYsTUFBN0QsRUFBcUU7QUFDcEVJLE1BQUFBLEtBQUssQ0FBQ0MsSUFBTixDQUFXYixJQUFJLENBQUMsWUFBRCxDQUFmOztBQUNBLFdBQUssTUFBTWMsSUFBWCxJQUFtQlQsTUFBTSxDQUFDQyxJQUFQLENBQVksS0FBS0csSUFBakIsQ0FBbkIsRUFBMkM7QUFDMUNHLFFBQUFBLEtBQUssQ0FBQ0MsSUFBTixDQUFZLE9BQU1kLFNBQVMsQ0FBRSxLQUFJZSxJQUFLLEVBQVgsQ0FBYyxPQUFNZixTQUFTLENBQUMsS0FBS1UsSUFBTCxDQUFVSyxJQUFWLEVBQWdCQSxJQUFqQixDQUF1QixFQUEvRTtBQUNBOztBQUNELFdBQUssTUFBTUEsSUFBWCxJQUFtQlQsTUFBTSxDQUFDQyxJQUFQLENBQVksS0FBS0ksS0FBakIsQ0FBbkIsRUFBNEM7QUFDM0NFLFFBQUFBLEtBQUssQ0FBQ0MsSUFBTixDQUFZLE9BQU1kLFNBQVMsQ0FBRSxJQUFHZSxJQUFLLEVBQVYsQ0FBYSxPQUFNZixTQUFTLENBQUMsS0FBS1csS0FBTCxDQUFXSSxJQUFYLEVBQWlCQSxJQUFsQixDQUF3QixFQUEvRTtBQUNBO0FBQ0Q7O0FBRUQsV0FBT0YsS0FBSyxDQUFDSixNQUFOLEdBQWVJLEtBQUssQ0FBQ0csSUFBTixDQUFXLElBQVgsQ0FBZixHQUFrQyxFQUF6QztBQUNBOztBQWpFMEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZGVidWcgZnJvbSAnLi4vbGliL2RlYnVnJztcblxuY29uc3QgeyBoaWdobGlnaHQsIG5vdGUgfSA9IGRlYnVnLnN0eWxlcztcblxuLyoqXG4gKiBDb21tYW5kIGFuZCBvcHRpb24gbG9va3VwIGZvciBmYXN0ZXIgcmVzb2x1dGlvbi5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTG9va3VwIHtcblx0LyoqXG5cdCAqIEEgbWFwIG9mIGNvbW1hbmQgbmFtZXMgYW5kIGFsaWFzZXMgdG8gY29tbWFuZCBpbnN0YW5jZXMuXG5cdCAqXG5cdCAqIEB0eXBlIHtPYmplY3R9XG5cdCAqL1xuXHRjb21tYW5kcyA9IHt9O1xuXG5cdC8qKlxuXHQgKiBBIG1hcCBvZiBleHRlbnNpb24gbmFtZXMgYW5kIGFsaWFzZXMgdG8gZXh0ZW5zaW9uIGluc3RhbmNlcy5cblx0ICpcblx0ICogQHR5cGUge09iamVjdH1cblx0ICovXG5cdGV4dGVuc2lvbnMgPSB7fTtcblxuXHQvKipcblx0ICogQSBtYXAgb2YgbG9uZyBvcHRpb24gbmFtZXMgYW5kIGFsaWFzZXMgdG8gb3B0aW9uIGluc3RhbmNlcy5cblx0ICpcblx0ICogQHR5cGUge09iamVjdH1cblx0ICovXG5cdGxvbmcgPSB7fTtcblxuXHQvKipcblx0ICogQSBtYXAgb2Ygc2hvcnQgb3B0aW9uIG5hbWVzIGFuZCBhbGlhc2VzIHRvIG9wdGlvbiBpbnN0YW5jZXMuXG5cdCAqXG5cdCAqIEB0eXBlIHtPYmplY3R9XG5cdCAqL1xuXHRzaG9ydCA9IHt9O1xuXG5cdC8qKlxuXHQgKiBEZXRlcm1pbmVzIGlmIHRoZSBsb29rdXAgaXMgZW1wdHkuXG5cdCAqXG5cdCAqIEB0eXBlIHtCb29sZWFufVxuXHQgKi9cblx0Z2V0IGVtcHR5KCkge1xuXHRcdHJldHVybiAhT2JqZWN0LmtleXModGhpcy5jb21tYW5kcykubGVuZ3RoICYmICFPYmplY3Qua2V5cyh0aGlzLmxvbmcpLmxlbmd0aCAmJiAhT2JqZWN0LmtleXModGhpcy5zaG9ydCkubGVuZ3RoO1xuXHR9XG5cblx0LyoqXG5cdCAqIFJlbmRlcnMgdGhlIGxvb2t1cHMgdG8gYSBzdHJpbmcuXG5cdCAqXG5cdCAqIEByZXR1cm5zIHtTdHJpbmd9XG5cdCAqIEBhY2Nlc3MgcHVibGljXG5cdCAqL1xuXHR0b1N0cmluZygpIHtcblx0XHRjb25zdCBsaW5lcyA9IFtdO1xuXG5cdFx0aWYgKE9iamVjdC5rZXlzKHRoaXMuY29tbWFuZHMpLmxlbmd0aCkge1xuXHRcdFx0bGluZXMucHVzaChub3RlKCcgIENvbW1hbmRzOicpKTtcblx0XHRcdGZvciAoY29uc3QgbmFtZSBvZiBPYmplY3Qua2V5cyh0aGlzLmNvbW1hbmRzKSkge1xuXHRcdFx0XHRsaW5lcy5wdXNoKGAgICAgJHtoaWdobGlnaHQobmFtZSl9ID0+ICR7aGlnaGxpZ2h0KHRoaXMuY29tbWFuZHNbbmFtZV0ubmFtZSl9YCk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKE9iamVjdC5rZXlzKHRoaXMubG9uZykubGVuZ3RoIHx8IE9iamVjdC5rZXlzKHRoaXMuc2hvcnQpLmxlbmd0aCkge1xuXHRcdFx0bGluZXMucHVzaChub3RlKCcgIE9wdGlvbnM6JykpO1xuXHRcdFx0Zm9yIChjb25zdCBuYW1lIG9mIE9iamVjdC5rZXlzKHRoaXMubG9uZykpIHtcblx0XHRcdFx0bGluZXMucHVzaChgICAgICR7aGlnaGxpZ2h0KGAtLSR7bmFtZX1gKX0gPT4gJHtoaWdobGlnaHQodGhpcy5sb25nW25hbWVdLm5hbWUpfWApO1xuXHRcdFx0fVxuXHRcdFx0Zm9yIChjb25zdCBuYW1lIG9mIE9iamVjdC5rZXlzKHRoaXMuc2hvcnQpKSB7XG5cdFx0XHRcdGxpbmVzLnB1c2goYCAgICAke2hpZ2hsaWdodChgLSR7bmFtZX1gKX0gPT4gJHtoaWdobGlnaHQodGhpcy5zaG9ydFtuYW1lXS5uYW1lKX1gKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gbGluZXMubGVuZ3RoID8gbGluZXMuam9pbignXFxuJykgOiAnJztcblx0fVxufVxuIl0sImZpbGUiOiJwYXJzZXIvbG9va3VwLmpzIn0=
