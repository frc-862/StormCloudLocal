"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _context = _interopRequireDefault(require("./context"));

var _debug = _interopRequireDefault(require("../lib/debug"));

var _errors = _interopRequireDefault(require("../lib/errors"));

var _fs = _interopRequireDefault(require("fs"));

var _help = _interopRequireDefault(require("../commands/help"));

var _path = _interopRequireDefault(require("path"));

var _util = require("../lib/util");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const {
  log
} = (0, _debug.default)('cli-kit:command');
const {
  highlight
} = _debug.default.styles;
const formatRegExp = /^([@! ]*[\w-_]+(?:\s*,\s*[@! ]*[\w-_]+)*)((?:\s*[<[]~?[\w-_]+[>\]])*)?$/;
const nameRegExp = /^([@! ]*)([\w-_]+)\s*$/;
/**
 * Defines a command and its options and arguments.
 *
 * @extends {Context}
 */

class Command extends _context.default {
  /**
   * Internal object for tracking aliases.
   *
   * @type {Object}
   * @private
   */

  /**
   * Custom help header and footer content.
   *
   * @type {Object}
   * @access private
   */

  /**
   * Constructs a command instance.
   *
   * @param {String} name - The command name or absolute path to a file.
   * @param {Object|CLI|Command|Context|Function} [params] - Command parameters or an action
   * function.
   * @param {Function|Command} [params.action] - A function to call when the command is found.
   * @param {Set.<String>|Array.<String>|String|Object} [params.aliases] - An array of command
   * aliases.
   * @param {Function} [params.callback] - A function to call when the command has been parsed.
   * @param {String|Function} [params.defaultCommand] - The default command to execute when this
   * command has no `action`. When value is a `String`, it looks up the subcommand and calls it.
   * If value is a `Function`, it simply invokes it.
   * @param {Boolean} [params.hidden=false] - When `true`, the option is not displayed on the
   * help screen or auto-suggest.
   * @access public
   *
   * @example
   *   new Command('foo')
   *   new Command('foo', {})
   *   new Command(new Command('foo'))
   */
  constructor(name, params = {}) {
    if (name && typeof name === 'string' && _path.default.isAbsolute(name) && _fs.default.existsSync(name)) {
      let ctx;

      try {
        log(`Requiring ${highlight(name)}`);
        ctx = require(name);

        if (!ctx || typeof ctx !== 'object') {
          throw new Error('Command must export an object');
        } // if this is an ES6 module, grab the default export


        if (ctx.__esModule) {
          ctx = ctx.default;
        }

        if (!ctx || typeof ctx !== 'object') {
          throw new Error('Command must export an object');
        }

        name = ctx.name || _path.default.parse(name).name;
        params = ctx;
      } catch (err) {
        throw _errors.default.INVALID_COMMAND(`Bad command "${name}": ${err.message}`, {
          name: name,
          scope: 'Command.constructor',
          value: err
        });
      }
    }

    if (!name || typeof name !== 'string') {
      throw _errors.default.INVALID_ARGUMENT('Expected command name to be a non-empty string', {
        name: 'name',
        scope: 'Command.constructor',
        value: name
      });
    } // parse the name and create the aliases and args: "ls, list <bar>"


    const format = name.trim();
    const m = format.match(formatRegExp);

    if (!m || !m[1]) {
      throw _errors.default.INVALID_ARGUMENT('Expected command name to be a non-empty string', {
        name: 'name',
        scope: 'Command.constructor',
        value: name
      });
    }

    if (typeof params === 'function') {
      params = {
        action: params
      };
    } // reset the name


    name = null; // get the aliases from the format and find the command name

    const aliases = new Set();

    for (let alias of m[1].split(',')) {
      const n = alias.match(nameRegExp);

      if (!n) {
        throw _errors.default.INVALID_ARGUMENT('Invalid command alias format', {
          name: 'alias',
          scope: 'Command.constructor',
          value: alias
        });
      }

      if (!n[1].includes('@') && !name) {
        name = n[2];
      } else {
        aliases.add(n[1].includes('!') ? `!${n[2]}` : n[2]);
      }
    }

    if (!name) {
      throw _errors.default.INVALID_ARGUMENT('Expected command name format to contain at least one non-aliased name', {
        name: 'format',
        scope: 'Command.constructor',
        value: format
      });
    }

    if (!params || typeof params !== 'object' || Array.isArray(params)) {
      throw _errors.default.INVALID_ARGUMENT('Expected command parameters to be an object', {
        name: 'params',
        scope: 'Command.constructor',
        value: params
      });
    }

    if (params.callback && typeof params.callback !== 'function') {
      throw _errors.default.INVALID_ARGUMENT('Expected command callback to be a function', {
        name: 'callback',
        scop: 'Command.constructor',
        value: params.callback
      });
    }

    if (params.defaultCommand !== undefined && (!params.defaultCommand || typeof params.defaultCommand !== 'string' && typeof params.defaultCommand !== 'function')) {
      throw _errors.default.INVALID_ARGUMENT('Expected default command to be a string or function', {
        name: 'defaultCommand',
        scope: 'Command.constructor',
        value: params.defaultCommand
      });
    }

    if (params.clikit instanceof Set) {
      // params is a cli-kit object
      if (params.clikit.has('CLI')) {
        // since a command cannot have a title "global" (only a `CLI` object can have that),
        // we must delete it so that the title is reset to the command name
        if (params.title === 'Global') {
          delete params.title;
        }

        delete params.terminal; // add an action handler that eitehr executes a specific command or the help for
        // for this command (e.g. this command is an extension)

        params.action = async parser => {
          const {
            defaultCommand
          } = params;

          if (defaultCommand === 'help' && this.get('help')) {
            await _help.default.action(parser);
          } else {
            const cmd = defaultCommand && this.commands[defaultCommand];

            if (cmd) {
              return cmd.action.call(cmd, parser);
            }
          }
        };
      } else if (!params.clikit.has('Command')) {
        // must be a command or extension
        throw _errors.default.INVALID_CLIKIT_OBJECT('Expected command options to be a CLI or Command object', {
          name: 'clikit',
          scope: 'Command.constructor',
          value: params.clikit
        });
      }
    }

    if (params.action && typeof params.action !== 'function' && !(params.action instanceof Command)) {
      throw _errors.default.INVALID_ARGUMENT('Expected command action to be a function or Command instance', {
        name: 'action',
        scope: 'Command.constructor',
        value: params.action
      });
    }

    params.name = name;
    const args = m[2] && m[2].trim().split(/\s+/);

    if (args !== null && args !== void 0 && args.length) {
      params.args = params.args ? [...args, ...params.args] : args;
    }

    super(params);

    _defineProperty(this, "_aliases", {});

    _defineProperty(this, "_help", {});

    (0, _util.declareCLIKitClass)(this, 'Command');

    if (params.action) {
      this.action = params.action;
    } else if (typeof params.defaultCommand === 'function') {
      this.action = params.defaultCommand;
    } else if (typeof params.defaultCommand === 'string') {
      this.action = this.lookup.commands[params.defaultCommand];
    } // mix aliases Set with params.aliases


    this._aliases = this.createAliases(aliases, params.aliases);
    this.callback = params.callback;
    this.clikitHelp = params.clikitHelp;
    this.help = params.help || {};
    this.defaultCommand = params.defaultCommand;
    this.hidden = !!params.hidden; // mix in any other custom props

    for (const [key, value] of Object.entries(params)) {
      if (!Object.prototype.hasOwnProperty.call(this, key)) {
        this[key] = value;
      }
    }
  }
  /**
   * A map of aliases an whether they are visible.
   *
   * @type {Object}
   * @access public
   */


  get aliases() {
    return this._aliases;
  }

  set aliases(value) {
    this._aliases = this.createAliases(value);
  }
  /**
   * Merges multiple alias constructs into a single alias object.
   *
   * @param {...Set.<String>|Array.<String>|String|Object} values - One or more alias values.
   * @returns {Object}
   * @access private
   */


  createAliases(...values) {
    const result = {};

    for (let value of values) {
      if (!value) {
        continue;
      }

      if (value instanceof Set) {
        value = Array.from(value);
      }

      if (typeof value === 'object' && !Array.isArray(value)) {
        Object.assign(result, value);
        continue;
      }

      if (!Array.isArray(value)) {
        value = [value];
      }

      for (const alias of value) {
        if (!alias || typeof alias !== 'string') {
          throw _errors.default.INVALID_ARGUMENT('Expected command aliases to be an array of strings', {
            name: 'aliases.alias',
            scope: 'Command.constructor',
            value: alias
          });
        }

        for (const a of alias.split(/[ ,|]+/)) {
          if (a === '!') {
            throw _errors.default.INVALID_ALIAS(`Invalid command alias "${alias}"`, {
              name: 'aliases',
              scope: 'Command.constructor',
              value: alias
            });
          }

          if (a[0] === '!') {
            result[a.substring(1)] = 'hidden';
          } else {
            result[a] = 'visible';
          }
        }
      }
    }

    return result;
  }
  /**
   * Custom help header and footer content. A string, function, or object with `header` and
   * `footer` properties may be used to set the `help` property, but the internal value will
   * always be an object with `header` and `footer` properties.
   *
   * @type {Object}
   * @access public
   */


  get help() {
    return this._help;
  }

  set help(value) {
    if (typeof value === 'string' || typeof value === 'function') {
      this._help.header = value;
    } else if (typeof value === 'object') {
      if (value.header) {
        if (typeof value.header === 'string' || typeof value.header === 'function') {
          this._help.header = value.header;
        } else {
          throw _errors.default.INVALID_ARGUMENT('Expected help content header to be a string or function');
        }
      }

      if (value.footer) {
        if (typeof value.footer === 'string' || typeof value.footer === 'function') {
          this._help.footer = value.footer;
        } else {
          throw _errors.default.INVALID_ARGUMENT('Expected help content footer to be a string or function');
        }
      }
    } else {
      this._help = {};
    }
  }
  /**
   * Returns the schema for this command and all child contexts.
   *
   * @returns {Object}
   * @access public
   */


  schema() {
    return {
      desc: this.desc
    };
  }

}

exports.default = Command;
//# sourceMappingURL=data:application/json;charset=utf8;base64,
