"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _argument = _interopRequireDefault(require("./argument"));

var _util = require("../lib/util");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Stores a list of `Argument` instances that have been registered for a context.
 *
 * @extends {Array}
 */
class ArgumentList extends Array {
  /**
   * Declares the class name.
   *
   * @access public
   */
  constructor() {
    super();
    (0, _util.declareCLIKitClass)(this, 'ArgumentList');
  }
  /**
   * Adds an argument to the list.
   *
   * @param {Object|String|Argument|ArgumentList|Array<Object|String|Argument>} arg - An object
   * of argument names to argument descriptors, an argument name, an `Argument` instance, an
   * `ArgumentList` instance, or array of object descriptors, argument names, and `Argument`
   * instances.
   * @access public
   */


  add(arg) {
    const args = Array.isArray(arg) ? arg : [arg];
    this.push.apply(this, args.map(a => new _argument.default(a)));
  }
  /**
   * Returns the number of arguments.
   *
   * @returns {Number}
   * @access public
   */


  get count() {
    return this.args.length;
  }
  /**
   * Generates an object containing the arguments for the help screen.
   *
   * @returns {Object}
   * @access public
   */


  generateHelp() {
    const entries = [];

    for (const {
      desc,
      hidden,
      hint,
      multiple,
      name,
      required
    } of this) {
      if (!hidden) {
        entries.push({
          desc,
          hint,
          multiple,
          name,
          required
        });
      }
    }

    return {
      count: entries.length,
      entries
    };
  }

}

exports.default = ArgumentList;
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBhcnNlci9hcmd1bWVudC1saXN0LmpzIl0sIm5hbWVzIjpbIkFyZ3VtZW50TGlzdCIsIkFycmF5IiwiY29uc3RydWN0b3IiLCJhZGQiLCJhcmciLCJhcmdzIiwiaXNBcnJheSIsInB1c2giLCJhcHBseSIsIm1hcCIsImEiLCJBcmd1bWVudCIsImNvdW50IiwibGVuZ3RoIiwiZ2VuZXJhdGVIZWxwIiwiZW50cmllcyIsImRlc2MiLCJoaWRkZW4iLCJoaW50IiwibXVsdGlwbGUiLCJuYW1lIiwicmVxdWlyZWQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7QUFFQTs7OztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDZSxNQUFNQSxZQUFOLFNBQTJCQyxLQUEzQixDQUFpQztBQUMvQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0NDLEVBQUFBLFdBQVcsR0FBRztBQUNiO0FBQ0Esa0NBQW1CLElBQW5CLEVBQXlCLGNBQXpCO0FBQ0E7QUFFRDtBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNDQyxFQUFBQSxHQUFHLENBQUNDLEdBQUQsRUFBTTtBQUNSLFVBQU1DLElBQUksR0FBR0osS0FBSyxDQUFDSyxPQUFOLENBQWNGLEdBQWQsSUFBcUJBLEdBQXJCLEdBQTJCLENBQUVBLEdBQUYsQ0FBeEM7QUFDQSxTQUFLRyxJQUFMLENBQVVDLEtBQVYsQ0FBZ0IsSUFBaEIsRUFBc0JILElBQUksQ0FBQ0ksR0FBTCxDQUFTQyxDQUFDLElBQUksSUFBSUMsaUJBQUosQ0FBYUQsQ0FBYixDQUFkLENBQXRCO0FBQ0E7QUFFRDtBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNVLE1BQUxFLEtBQUssR0FBRztBQUNYLFdBQU8sS0FBS1AsSUFBTCxDQUFVUSxNQUFqQjtBQUNBO0FBRUQ7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQ0MsRUFBQUEsWUFBWSxHQUFHO0FBQ2QsVUFBTUMsT0FBTyxHQUFHLEVBQWhCOztBQUVBLFNBQUssTUFBTTtBQUFFQyxNQUFBQSxJQUFGO0FBQVFDLE1BQUFBLE1BQVI7QUFBZ0JDLE1BQUFBLElBQWhCO0FBQXNCQyxNQUFBQSxRQUF0QjtBQUFnQ0MsTUFBQUEsSUFBaEM7QUFBc0NDLE1BQUFBO0FBQXRDLEtBQVgsSUFBK0QsSUFBL0QsRUFBcUU7QUFDcEUsVUFBSSxDQUFDSixNQUFMLEVBQWE7QUFDWkYsUUFBQUEsT0FBTyxDQUFDUixJQUFSLENBQWE7QUFDWlMsVUFBQUEsSUFEWTtBQUVaRSxVQUFBQSxJQUZZO0FBR1pDLFVBQUFBLFFBSFk7QUFJWkMsVUFBQUEsSUFKWTtBQUtaQyxVQUFBQTtBQUxZLFNBQWI7QUFPQTtBQUNEOztBQUVELFdBQU87QUFDTlQsTUFBQUEsS0FBSyxFQUFFRyxPQUFPLENBQUNGLE1BRFQ7QUFFTkUsTUFBQUE7QUFGTSxLQUFQO0FBSUE7O0FBNUQ4QyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBBcmd1bWVudCBmcm9tICcuL2FyZ3VtZW50JztcblxuaW1wb3J0IHsgZGVjbGFyZUNMSUtpdENsYXNzIH0gZnJvbSAnLi4vbGliL3V0aWwnO1xuXG4vKipcbiAqIFN0b3JlcyBhIGxpc3Qgb2YgYEFyZ3VtZW50YCBpbnN0YW5jZXMgdGhhdCBoYXZlIGJlZW4gcmVnaXN0ZXJlZCBmb3IgYSBjb250ZXh0LlxuICpcbiAqIEBleHRlbmRzIHtBcnJheX1cbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQXJndW1lbnRMaXN0IGV4dGVuZHMgQXJyYXkge1xuXHQvKipcblx0ICogRGVjbGFyZXMgdGhlIGNsYXNzIG5hbWUuXG5cdCAqXG5cdCAqIEBhY2Nlc3MgcHVibGljXG5cdCAqL1xuXHRjb25zdHJ1Y3RvcigpIHtcblx0XHRzdXBlcigpO1xuXHRcdGRlY2xhcmVDTElLaXRDbGFzcyh0aGlzLCAnQXJndW1lbnRMaXN0Jyk7XG5cdH1cblxuXHQvKipcblx0ICogQWRkcyBhbiBhcmd1bWVudCB0byB0aGUgbGlzdC5cblx0ICpcblx0ICogQHBhcmFtIHtPYmplY3R8U3RyaW5nfEFyZ3VtZW50fEFyZ3VtZW50TGlzdHxBcnJheTxPYmplY3R8U3RyaW5nfEFyZ3VtZW50Pn0gYXJnIC0gQW4gb2JqZWN0XG5cdCAqIG9mIGFyZ3VtZW50IG5hbWVzIHRvIGFyZ3VtZW50IGRlc2NyaXB0b3JzLCBhbiBhcmd1bWVudCBuYW1lLCBhbiBgQXJndW1lbnRgIGluc3RhbmNlLCBhblxuXHQgKiBgQXJndW1lbnRMaXN0YCBpbnN0YW5jZSwgb3IgYXJyYXkgb2Ygb2JqZWN0IGRlc2NyaXB0b3JzLCBhcmd1bWVudCBuYW1lcywgYW5kIGBBcmd1bWVudGBcblx0ICogaW5zdGFuY2VzLlxuXHQgKiBAYWNjZXNzIHB1YmxpY1xuXHQgKi9cblx0YWRkKGFyZykge1xuXHRcdGNvbnN0IGFyZ3MgPSBBcnJheS5pc0FycmF5KGFyZykgPyBhcmcgOiBbIGFyZyBdO1xuXHRcdHRoaXMucHVzaC5hcHBseSh0aGlzLCBhcmdzLm1hcChhID0+IG5ldyBBcmd1bWVudChhKSkpO1xuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgdGhlIG51bWJlciBvZiBhcmd1bWVudHMuXG5cdCAqXG5cdCAqIEByZXR1cm5zIHtOdW1iZXJ9XG5cdCAqIEBhY2Nlc3MgcHVibGljXG5cdCAqL1xuXHRnZXQgY291bnQoKSB7XG5cdFx0cmV0dXJuIHRoaXMuYXJncy5sZW5ndGg7XG5cdH1cblxuXHQvKipcblx0ICogR2VuZXJhdGVzIGFuIG9iamVjdCBjb250YWluaW5nIHRoZSBhcmd1bWVudHMgZm9yIHRoZSBoZWxwIHNjcmVlbi5cblx0ICpcblx0ICogQHJldHVybnMge09iamVjdH1cblx0ICogQGFjY2VzcyBwdWJsaWNcblx0ICovXG5cdGdlbmVyYXRlSGVscCgpIHtcblx0XHRjb25zdCBlbnRyaWVzID0gW107XG5cblx0XHRmb3IgKGNvbnN0IHsgZGVzYywgaGlkZGVuLCBoaW50LCBtdWx0aXBsZSwgbmFtZSwgcmVxdWlyZWQgfSBvZiB0aGlzKSB7XG5cdFx0XHRpZiAoIWhpZGRlbikge1xuXHRcdFx0XHRlbnRyaWVzLnB1c2goe1xuXHRcdFx0XHRcdGRlc2MsXG5cdFx0XHRcdFx0aGludCxcblx0XHRcdFx0XHRtdWx0aXBsZSxcblx0XHRcdFx0XHRuYW1lLFxuXHRcdFx0XHRcdHJlcXVpcmVkXG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB7XG5cdFx0XHRjb3VudDogZW50cmllcy5sZW5ndGgsXG5cdFx0XHRlbnRyaWVzXG5cdFx0fTtcblx0fVxufVxuIl0sImZpbGUiOiJwYXJzZXIvYXJndW1lbnQtbGlzdC5qcyJ9
